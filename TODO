* Things that need to be done

** Optimizing the drawing functions

   If you generate a graph with any more than 20 nodes, you will
   notice considerable, jarring flicker whenever the graph is
   redrawn. This is unacceptable, and can be fixed by doing the
   following optimizations.

   - Scalar multiplication: I doubt this is taking too much time, but
     each time the graph is redrawn the base points are scaled to the
     current window size. This is only neccesary when the window is
     resized. We can store the scaled points somewhere and change them
     when the window size changes. I'm not convinced this is too big
     of a problem. I've optimized some other things and the flickering
     is under control now.

   Note this app does a lot of sleeping and is not very
   CPU-intensive. The only thing that is being called several times
   per second is the drawing function. So if any optimizations need to
   take place, they need to take place here. Anywhere else is a waste
   of time.

** Aesthetics

   Right now, goals are green, players are red, and nodes are black;
   It would be desirable to assign every player a random new color, so
   we can distinguish between them.

** Weights

   Our graph data structure can trivially represent weighted
   edges. Should we choose to use them we should add an appropriate
   visual cue.

** Distance

   In Gary's gridsearch, because each grid cell had coordinates,
   computing the distance to the goal was as easy as pie. However,
   because we are using abstract, mathematical graphs with an infinite
   number of visual representations, this is no longer applicable.

   I honestly don't have an answer to this problem. I could use
   Djikstra's algorithm to give the distance between vertices, but
   this would obviously give students the shortest path. The physical
   distance between two nodes will depend on the graphical
   representation of the graph.

   I hope the other merits of this system make up for this small
   sacrifice.

** Player-player interaction

   The easiest way of letting players know about the location of other
   players would be to pass another function that returns a list of
   other player positions, perhaps with their names.

** Layout

   The grid layout is acceptable for some graphs, but this application
   is really missing a general grid layout algorithm.

** Documentation

   This application is near feature complete. Once the things in this
   TODO are taken care of, I'd like to focus more on documenting the
   source code, because this app will be in the care of CS students,
   it must be accessible! The main reason this program was created was
   because the current grid search application we were using was
   large, undocumented, and inaccessible. We don't want to repeat the
   same mistake.

*** Code quality issues

    There are some inconsistencies in the code, such as:
    - The arbitrary interchanging of "vertex" and "node"
    - A little too much list trickery (look at get-edges)
    - Sometimes arbitrary arguments: Some of the decisions to pass a
      graph-info struct over the actual graph data structure are
      pretty arbitrary, and make the interactions a little tangled.

    I would like to add some cleaner separation between the UI code
    and the rest of the program. But for now, it works, it is not too
    complicated, and it does not pollute the user search programs like
    the previous grid-search did.
