* Things that need to be done
** Optimization

   I have made a point of putting code simplicity and readability
   before efficiency, and I have tried to follow the guidelines about
   premature optimization... but this program chokes on graphs with
   more than ~150 vertices. The drawing code in particular is quite
   slow. Things are being done pretty inefficiently all over the
   program, but I will be doing some profiling to see where I can make
   the biggest improvements.

   Though our adjacency matrix gives us O(1) edge lookup time, it also
   takes up O(n^2) space. Although the computers in the lab should be
   capable of holding a 1000x1000 size vector (and graphs of 1000
   vertices may be beyond the scope of this program), we may want to
   use both adjacency matrices and adjacency lists, depending on the
   type of graph being created.
   
** Aesthetics

   I'd like to clean up the drawing code and organize it so one can
   choose from different drawing styles. We could have a drawing style
   that mimics a grid, for example.

** Weights

   Our graph data structure can trivially represent weighted
   edges. Should we choose to use them we should add an appropriate
   visual cue.

** Distance

   In Gary's gridsearch, because each grid cell had coordinates,
   computing the distance to the goal was as easy as pie. However,
   because we are using abstract, mathematical graphs with an infinite
   number of visual representations, this is no longer applicable.

   One solution, which I use now, would be to provide the user with a
   function that returns the coordinates of a vertex.
   
** Player-player interaction

   The easiest way of letting players know about the location of other
   players would be to pass another function that returns a list of
   other player positions, perhaps with their names.

** Layout

   The grid layout is acceptable for some graphs, but this application
   is really missing a general grid layout algorithm.
   
** Documentation

   This application is near feature complete. Once the things in this
   TODO are taken care of, I'd like to focus more on documenting the
   source code. Since this app will be in the care of CS students, it
   must be accessible! The main reason this program was created was
   because the current grid search application we were using was
   large, undocumented, and inaccessible. We don't want to repeat the
   same mistake.

   I will start working on a guide with pictures and code that can be
   hosted on the github wiki page.

*** Code quality issues

    I have been refactoring the code quite a bit, but I'm still not
    satisfied with it. The source code has gotten too long in
    general. To its defense, the program does more now than it did
    before, but there is much redundancy that can be removed.

